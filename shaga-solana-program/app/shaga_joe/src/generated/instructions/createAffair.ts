/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import { AffairPayload, affairPayloadBeet } from '../types/AffairPayload'

/**
 * @category Instructions
 * @category CreateAffair
 * @category generated
 */
export type CreateAffairInstructionArgs = {
  payload: AffairPayload
}
/**
 * @category Instructions
 * @category CreateAffair
 * @category generated
 */
export const createAffairStruct = new beet.FixableBeetArgsStruct<
  CreateAffairInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['payload', affairPayloadBeet],
  ],
  'CreateAffairInstructionArgs'
)
/**
 * Accounts required by the _createAffair_ instruction
 *
 * @property [_writable_, **signer**] authority
 * @property [_writable_] affair
 * @property [_writable_] lender
 * @property [_writable_] affairsList
 * @property [_writable_] affairClockworkThread
 * @property [] vault
 * @property [] threadAuthority
 * @property [] clockworkProgram
 * @category Instructions
 * @category CreateAffair
 * @category generated
 */
export type CreateAffairInstructionAccounts = {
  authority: web3.PublicKey
  affair: web3.PublicKey
  lender: web3.PublicKey
  affairsList: web3.PublicKey
  affairClockworkThread: web3.PublicKey
  vault: web3.PublicKey
  threadAuthority: web3.PublicKey
  systemProgram?: web3.PublicKey
  clockworkProgram: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const createAffairInstructionDiscriminator = [
  93, 92, 104, 93, 148, 117, 252, 104,
]

/**
 * Creates a _CreateAffair_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category CreateAffair
 * @category generated
 */
export function createCreateAffairInstruction(
  accounts: CreateAffairInstructionAccounts,
  args: CreateAffairInstructionArgs,
  programId = new web3.PublicKey('9SwYZxTQUYruFSHYeTqrtB5pTtuGJEGksh7ufpNS1YK5')
) {
  const [data] = createAffairStruct.serialize({
    instructionDiscriminator: createAffairInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.authority,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.affair,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.lender,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.affairsList,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.affairClockworkThread,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.vault,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.threadAuthority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.clockworkProgram,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
